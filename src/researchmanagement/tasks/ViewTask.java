/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package researchmanagement.tasks;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JTextArea;
import javax.swing.JOptionPane;
import researchmanagement.Audit;
import researchmanagement.Dashboard;
import researchmanagement.Database;
import researchmanagement.models.Account;
import researchmanagement.models.Project;
import researchmanagement.models.Task;


/**
 *
 * @author robert.watkin
 */
public class ViewTask extends javax.swing.JFrame {

    private final Account loggedIn;
    private final int taskId;
    
    private Account researcher;
    private Task selectedTask;
    private Project project;
    
    
    
    
    
    /**
     * Creates new form ViewTask
     * @param loggedIn
     * @param taskId
     */
    public ViewTask(Account loggedIn, int taskId) {
        // Check for an invalid access to this form
        if (loggedIn.getId() == -1){
            this.dispose();
        }
        initComponents();
        this.setVisible(true);
        
        this.taskId = taskId;
        this.loggedIn = loggedIn;

        if (loggedIn.getRole().equals("Researcher")){
            editTaskButton.setEnabled(false);
            deleteTaskButton.setEnabled(false);
            
        }
        getTask();
        setLabels();
        loadNotes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        dashboardButton = new javax.swing.JButton();
        taskPane = new javax.swing.JScrollPane();
        taskNotesPanel = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        headResearcherLabel = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        projectNameLabel = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        taskStatusLabel = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        researcherLabel = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        updateStatusButton = new javax.swing.JButton();
        editTaskButton = new javax.swing.JButton();
        addNoteButton = new javax.swing.JButton();
        deleteTaskButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        noteTextArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(800, 500));
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setMaximumSize(new java.awt.Dimension(600, 200));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("View Task");

        dashboardButton.setText("Dashboard");
        dashboardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dashboardButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 204, Short.MAX_VALUE)
                .addGap(467, 467, 467)
                .addComponent(dashboardButton, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(dashboardButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        taskPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        taskNotesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Task Notes"));
        taskNotesPanel.setMaximumSize(new java.awt.Dimension(384, 414));
        taskNotesPanel.setMinimumSize(new java.awt.Dimension(314, 414));
        taskNotesPanel.setPreferredSize(new java.awt.Dimension(384, 414));
        taskNotesPanel.setLayout(new javax.swing.BoxLayout(taskNotesPanel, javax.swing.BoxLayout.Y_AXIS));
        taskPane.setViewportView(taskNotesPanel);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Name");

        nameLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        nameLabel.setText("null");

        headResearcherLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        headResearcherLabel.setText("null");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel5.setText("Head Researcher");

        projectNameLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        projectNameLabel.setText("null");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel7.setText("Project Name");

        taskStatusLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        taskStatusLabel.setText("null");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel9.setText("Task Status");

        researcherLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        researcherLabel.setText("null");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel6.setText("Researcher");

        updateStatusButton.setText("Mark as \"Complete Requiring Review\"");
        updateStatusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateStatusButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(updateStatusButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(headResearcherLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(researcherLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(projectNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 336, Short.MAX_VALUE)
                            .addComponent(taskStatusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 336, Short.MAX_VALUE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(headResearcherLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(researcherLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(projectNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel9)
                .addGap(2, 2, 2)
                .addComponent(taskStatusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addComponent(updateStatusButton)
                .addContainerGap())
        );

        editTaskButton.setText("Edit");
        editTaskButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editTaskButtonActionPerformed(evt);
            }
        });

        addNoteButton.setText("Add Note");
        addNoteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNoteButtonActionPerformed(evt);
            }
        });

        deleteTaskButton.setText("Delete");
        deleteTaskButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteTaskButtonActionPerformed(evt);
            }
        });

        noteTextArea.setColumns(20);
        noteTextArea.setLineWrap(true);
        noteTextArea.setRows(5);
        noteTextArea.setWrapStyleWord(true);
        jScrollPane1.setViewportView(noteTextArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(editTaskButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(116, 116, 116)
                        .addComponent(deleteTaskButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(addNoteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(taskPane))
                .addContainerGap())
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(taskPane, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editTaskButton)
                    .addComponent(addNoteButton)
                    .addComponent(deleteTaskButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void dashboardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dashboardButtonActionPerformed
        // open dashboard
        Dashboard d = new Dashboard(loggedIn);
        d.setVisible(true);
        
        this.dispose();
    }//GEN-LAST:event_dashboardButtonActionPerformed

    private void editTaskButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editTaskButtonActionPerformed
 
        // load edit task page
        EditTask et = new EditTask(loggedIn, selectedTask);
        this.dispose();
    }//GEN-LAST:event_editTaskButtonActionPerformed

    private void addNoteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNoteButtonActionPerformed
        // add a note
        String note = noteTextArea.getText();
        
        String sqlInsertNote = "INSERT INTO tbl_notes (Note, TaskID) VALUES (?, ?)";
        
        try (Connection conn = Database.Connect();
                PreparedStatement ps = conn.prepareStatement(sqlInsertNote)){
           
            ps.setString(1, note);
            ps.setInt(2, selectedTask.getId());
            int row = ps.executeUpdate();
            
            System.out.println("Note inserted into row " + row);
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "There has been an error creating the note\n"+e+"\nReturning to dashboard");
            
            Dashboard d = new Dashboard(loggedIn);
            d.setVisible(true);
            this.dispose();
        } 
        Audit.Update("tbl_notes", loggedIn.getId(), loggedIn.getFirstName(), "Insert");
        
        
        
        loadNotes();
    }//GEN-LAST:event_addNoteButtonActionPerformed

    private void deleteTaskButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteTaskButtonActionPerformed
        // create sql string to delete a task
        String sqlDeleteTask = "DELETE FROM tbl_tasks WHERE TaskID=?";

        // user confirmation to delete the account
        int reply = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this task?\n\nThis cannot be undone!", "Warning!", JOptionPane.YES_NO_OPTION);

        if (reply == JOptionPane.YES_OPTION) {   
            // try with resource for database querying
            try (Connection conn = Database.Connect();
                    PreparedStatement ps = conn.prepareStatement(sqlDeleteTask)){

                // add task id to the prepared statement
                ps.setInt(1, selectedTask.getId());
                
                ps.executeUpdate();
                
            } catch (Exception e){
                JOptionPane.showMessageDialog(this, "There has been an error deleting this task\n"+e+"\nPlease try again");
                return;
            }
            Audit.Update("tbl_tasks", loggedIn.getId(), loggedIn.getFirstName(), "Delete");
        } else {
            return;
        }
        
        // Delete tasks
        String sqlDeleteNote = "DELETE FROM tbl_notes WHERE TaskID=?";

        try (Connection conn = Database.Connect();
                PreparedStatement ps = conn.prepareStatement(sqlDeleteNote)){

            ps.setInt(1, selectedTask.getId());

            ps.executeUpdate();

        } catch (Exception e){
            e.printStackTrace();
        }
        Audit.Update("tbl_notes", loggedIn.getId(), loggedIn.getFirstName(), "Delete");
        
        
        // display success message
        JOptionPane.showMessageDialog(this, "The account has been deleted successfully\n\nReturning to dashboard");
        
        // return to dashboard
        Dashboard d = new Dashboard(loggedIn);
        d.setVisible(true);
        this.dispose();
 

    }//GEN-LAST:event_deleteTaskButtonActionPerformed

    private void updateStatusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateStatusButtonActionPerformed
        String sqlUpdateStatus = "UPDATE tbl_tasks SET Status=? WHERE TaskID=?";
        
        
        // try with resource for database querying
        try(Connection conn = Database.Connect();
                PreparedStatement ps = conn.prepareStatement(sqlUpdateStatus)){
            
            // input data to prepared statement
            if (selectedTask.getStatus().equals("In Progress")){
                ps.setString(1, "Complete Requiring Review");
            } else {
                ps.setString(1, "Complete");
                
            }
            ps.setInt(2, selectedTask.getId());
            
            ps.executeUpdate();
            
            getTask();
            setLabels();
            
        } catch (Exception e){
            JOptionPane.showMessageDialog(this, "There has been an error updating this task\n\nPlease try again");
            return;
        }
        Audit.Update("tbl_tasks", loggedIn.getId(), loggedIn.getFirstName(), "Update");
    }//GEN-LAST:event_updateStatusButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewTask.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewTask.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewTask.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewTask.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewTask(new Account(-1, null, null, null, null, null), -1).setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addNoteButton;
    private javax.swing.JButton dashboardButton;
    private javax.swing.JButton deleteTaskButton;
    private javax.swing.JButton editTaskButton;
    private javax.swing.JLabel headResearcherLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextArea noteTextArea;
    private javax.swing.JLabel projectNameLabel;
    private javax.swing.JLabel researcherLabel;
    private javax.swing.JPanel taskNotesPanel;
    private javax.swing.JScrollPane taskPane;
    private javax.swing.JLabel taskStatusLabel;
    private javax.swing.JButton updateStatusButton;
    // End of variables declaration//GEN-END:variables

    
    private void getTask() {
        String sqlGetTask = "SELECT * FROM tbl_tasks WHERE TaskID=?";
        
        try (Connection conn = Database.Connect();
                PreparedStatement ps = conn.prepareStatement(sqlGetTask)){
            
            ps.setInt(1, this.taskId);
            
            ResultSet rs = ps.executeQuery();
            
            if (rs.next()){
                selectedTask = new Task(rs.getInt("TaskID"), rs.getString("Name"), rs.getString("Status"), rs.getInt("ProjectID"), rs.getInt("AccountID"));
            } else {
                JOptionPane.showMessageDialog(this, "There has been an error retreiving the task\n\nReturning to dashboard");
            
                Dashboard d = new Dashboard(loggedIn);
                d.setVisible(true);
                this.dispose();
            }
            
        }catch (Exception e) {
            JOptionPane.showMessageDialog(this, "There has been an error retreiving the task\n\nReturning to dashboard");
            
            Dashboard d = new Dashboard(loggedIn);
            d.setVisible(true);
            this.dispose();
        }
    }

    private void setLabels() {
        nameLabel.setText(selectedTask.getName());
        taskStatusLabel.setText(selectedTask.getStatus());
        
        // get researcher (account)
        String sqlGetResearcher = "SELECT * FROM tbl_accounts WHERE AccountID=?";
        
        try (Connection conn = Database.Connect();
                PreparedStatement ps = conn.prepareStatement(sqlGetResearcher)){
            
            ps.setInt(1, selectedTask.getAccountId());
            
            ResultSet rs = ps.executeQuery();
            
            if (rs.next()){
                researcher = new Account(rs.getInt("AccountID"), rs.getString("FirstName"), rs.getString("LastName"), rs.getString("Email"), rs.getString("Role"), rs.getString("DOB"));
            }
            else {
                JOptionPane.showMessageDialog(this, "There has been an error retreiving the researcher\n\nReturning to dashboard");
            
                Dashboard d = new Dashboard(loggedIn);
                d.setVisible(true);
                this.dispose();
            }
            
            rs.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "There has been an error retreiving the researcher\n\nReturning to dashboard");
            
            Dashboard d = new Dashboard(loggedIn);
            d.setVisible(true);
            this.dispose();
        }
        
        
        researcherLabel.setText(researcher.getFirstName() + " " + researcher.getLastName());
       
        
        //get project
        String sqlGetProject = "SELECT * FROM tbl_projects WHERE ProjectID=?";
        
        try (Connection conn = Database.Connect();
                PreparedStatement ps = conn.prepareStatement(sqlGetProject)){
            
            ps.setInt(1, selectedTask.getProjectId());
            
            ResultSet rs = ps.executeQuery();
            
            if (rs.next()){
                project = new Project(rs.getInt("ProjectID"), rs.getString("Name"), rs.getString("Status"), rs.getInt("CustomerID"), rs.getInt("HeadResearcherID"));
            }
            else{
                JOptionPane.showMessageDialog(this, "There has been an error retreiving the head researcher\n\nReturning to dashboard");
            
                Dashboard d = new Dashboard(loggedIn);
                d.setVisible(true);
                this.dispose();
            }
            
            rs.close();
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "There has been an error retreiving the head researcher\n\nReturning to dashboard");
            
            Dashboard d = new Dashboard(loggedIn);
            d.setVisible(true);
            this.dispose();
        }
        
        // Get head researcher
         // get researcher (account)
        String sqlGetHeadResearcher = "SELECT * FROM tbl_accounts WHERE AccountID=?";
        Account headResearcher = null;
        
        try (Connection conn = Database.Connect();
                PreparedStatement ps = conn.prepareStatement(sqlGetHeadResearcher)){
            
            ps.setInt(1, project.getHeadResearcherId());
            
            ResultSet rs = ps.executeQuery();
            
            if (rs.next()){
                headResearcher = new Account(rs.getInt("AccountID"), rs.getString("FirstName"), rs.getString("LastName"), rs.getString("Email"), rs.getString("Role"), rs.getString("DOB"));
            }
            else {
                JOptionPane.showMessageDialog(this, "There has been an error retreiving the head researcher\n\nReturning to dashboard");
            
                Dashboard d = new Dashboard(loggedIn);
                d.setVisible(true);
                this.dispose();
            }
            
            rs.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "There has been an error retreiving the head researcher\n\nReturning to dashboard");
            
            Dashboard d = new Dashboard(loggedIn);
            d.setVisible(true);
            this.dispose();
        }
        
        headResearcherLabel.setText(headResearcher.getFirstName() + " " + headResearcher.getLastName());
        
        projectNameLabel.setText(project.getName());
        
        // Determing button functionality and text for updating status
        if (selectedTask.getStatus().equals("In Progress")){
            if (!loggedIn.getRole().equals("Researcher") && !loggedIn.getRole().equals("System Administrator")){
                updateStatusButton.setEnabled(false);
            }
        } else if (selectedTask.getStatus().equals("Complete Requiring Review")) {
            updateStatusButton.setText("Mark as \"Complete\"");
            if (!loggedIn.getRole().equals("Head Researcher") && !loggedIn.getRole().equals("System Administrator")){
                updateStatusButton.setEnabled(false);
            }
        } else {
            updateStatusButton.setVisible(false);
        }
    }

    private void loadNotes() {
        taskNotesPanel.removeAll();
        //get notes
        String sqlGetNotes = "SELECT * FROM tbl_notes WHERE TaskID=?";
        
        try (Connection conn = Database.Connect();
                PreparedStatement ps = conn.prepareStatement(sqlGetNotes)){
           
            ps.setInt(1, selectedTask.getId());
            ResultSet rs = ps.executeQuery();
            
            if (!rs.isBeforeFirst()){
                return;
            }
            
            while (rs.next()){
                JTextArea n = new JTextArea(rs.getString("Note"));
                n.setLineWrap(true);
                n.setEditable(false);
                taskNotesPanel.add(n);
            }
            
            rs.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "There has been an error retreiving the task notes\n"+e+"\nReturning to dashboard");
            
            Dashboard d = new Dashboard(loggedIn);
            d.setVisible(true);
            this.dispose();
        } 
        
        taskNotesPanel.validate();
        taskNotesPanel.repaint();
        taskNotesPanel.setVisible(true);
    }
}
